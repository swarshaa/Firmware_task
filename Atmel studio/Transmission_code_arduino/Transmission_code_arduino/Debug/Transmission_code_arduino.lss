
Transmission_code_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eeprom       00000400  00810000  00810000  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000650  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082d  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a2  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cc  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_Init>:
#define BAUD 2400
#define UBRR_VALUE ((F_CPU / (16UL * BAUD)) - 1)
unsigned char EEMEM Myvar[1024]; 

void UART_Init() {
	UBRR0H = (unsigned char)(UBRR_VALUE >> 8);
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)UBRR_VALUE;
  86:	8f e9       	ldi	r24, 0x9F	; 159
  88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  98:	08 95       	ret

0000009a <UART_Receive>:
}

char UART_Receive() {
	while (!(UCSR0A & (1 << RXC0)));
  9a:	e0 ec       	ldi	r30, 0xC0	; 192
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 23       	and	r24, r24
  a2:	ec f7       	brge	.-6      	; 0x9e <UART_Receive+0x4>
	return UDR0;
  a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
  a8:	08 95       	ret

000000aa <main>:

int main(void) {
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	cf 5f       	subi	r28, 0xFF	; 255
  b4:	d3 40       	sbci	r29, 0x03	; 3
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
	UART_Init();
  c0:	0e 94 40 00 	call	0x80	; 0x80 <UART_Init>

		for (int i = 0; i < index; i++) {
			eeprom_write_byte(&Myvar[i], received_string[i]);
		}
		for (int i = 0; i < index; i++) {
			while (!(UCSR0A & (1 << UDRE0)));
  c4:	00 ec       	ldi	r16, 0xC0	; 192
  c6:	10 e0       	ldi	r17, 0x00	; 0
			UDR0 = received_string[i]; // Transmit each character back
  c8:	0f 2e       	mov	r0, r31
  ca:	f6 ec       	ldi	r31, 0xC6	; 198
  cc:	6f 2e       	mov	r6, r31
  ce:	71 2c       	mov	r7, r1
  d0:	f0 2d       	mov	r31, r0
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	7c 01       	movw	r14, r24
char UART_Receive() {
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

int main(void) {
  d8:	6c 01       	movw	r12, r24
	UART_Init();

	while (1) {
		char received_string[1023];
		int index = 0;
  da:	81 2c       	mov	r8, r1
  dc:	91 2c       	mov	r9, r1
		char received_char;
		do {
			received_char = UART_Receive();
  de:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_Receive>
			received_string[index++] = received_char;
  e2:	9f ef       	ldi	r25, 0xFF	; 255
  e4:	89 1a       	sub	r8, r25
  e6:	99 0a       	sbc	r9, r25
  e8:	f6 01       	movw	r30, r12
  ea:	81 93       	st	Z+, r24
  ec:	6f 01       	movw	r12, r30
		} while (received_char != '\n');
  ee:	8a 30       	cpi	r24, 0x0A	; 10
  f0:	b1 f7       	brne	.-20     	; 0xde <main+0x34>
		received_string[index] = '\0'; 
  f2:	e1 e0       	ldi	r30, 0x01	; 1
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e8 0d       	add	r30, r8
  fc:	f9 1d       	adc	r31, r9
  fe:	10 82       	st	Z, r1


		for (int i = 0; i < index; i++) {
 100:	18 14       	cp	r1, r8
 102:	19 04       	cpc	r1, r9
 104:	34 f7       	brge	.-52     	; 0xd2 <main+0x28>
 106:	0f 2e       	mov	r0, r31
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	af 2e       	mov	r10, r31
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	bf 2e       	mov	r11, r31
 110:	f0 2d       	mov	r31, r0
 112:	4f 01       	movw	r8, r30
 114:	67 01       	movw	r12, r14
			eeprom_write_byte(&Myvar[i], received_string[i]);
 116:	f6 01       	movw	r30, r12
 118:	61 91       	ld	r22, Z+
 11a:	6f 01       	movw	r12, r30
 11c:	c5 01       	movw	r24, r10
 11e:	0e 94 a4 00 	call	0x148	; 0x148 <eeprom_write_byte>
 122:	ff ef       	ldi	r31, 0xFF	; 255
 124:	af 1a       	sub	r10, r31
 126:	bf 0a       	sbc	r11, r31
			received_string[index++] = received_char;
		} while (received_char != '\n');
		received_string[index] = '\0'; 


		for (int i = 0; i < index; i++) {
 128:	c8 14       	cp	r12, r8
 12a:	d9 04       	cpc	r13, r9
 12c:	a1 f7       	brne	.-24     	; 0x116 <main+0x6c>
			eeprom_write_byte(&Myvar[i], received_string[i]);
		}
		for (int i = 0; i < index; i++) {
			while (!(UCSR0A & (1 << UDRE0)));
 12e:	f8 01       	movw	r30, r16
 130:	80 81       	ld	r24, Z
 132:	85 ff       	sbrs	r24, 5
 134:	fc cf       	rjmp	.-8      	; 0x12e <main+0x84>
			UDR0 = received_string[i]; // Transmit each character back
 136:	f7 01       	movw	r30, r14
 138:	81 91       	ld	r24, Z+
 13a:	7f 01       	movw	r14, r30
 13c:	f3 01       	movw	r30, r6
 13e:	80 83       	st	Z, r24


		for (int i = 0; i < index; i++) {
			eeprom_write_byte(&Myvar[i], received_string[i]);
		}
		for (int i = 0; i < index; i++) {
 140:	e8 14       	cp	r14, r8
 142:	f9 04       	cpc	r15, r9
 144:	a1 f7       	brne	.-24     	; 0x12e <main+0x84>
 146:	c5 cf       	rjmp	.-118    	; 0xd2 <main+0x28>

00000148 <eeprom_write_byte>:
 148:	26 2f       	mov	r18, r22

0000014a <eeprom_write_r18>:
 14a:	f9 99       	sbic	0x1f, 1	; 31
 14c:	fe cf       	rjmp	.-4      	; 0x14a <eeprom_write_r18>
 14e:	1f ba       	out	0x1f, r1	; 31
 150:	92 bd       	out	0x22, r25	; 34
 152:	81 bd       	out	0x21, r24	; 33
 154:	20 bd       	out	0x20, r18	; 32
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	fa 9a       	sbi	0x1f, 2	; 31
 15c:	f9 9a       	sbi	0x1f, 1	; 31
 15e:	0f be       	out	0x3f, r0	; 63
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	08 95       	ret

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
