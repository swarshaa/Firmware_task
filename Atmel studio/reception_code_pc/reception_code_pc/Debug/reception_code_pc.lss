
reception_code_pc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eeprom       00000400  00810000  00810000  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000610  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000844  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fd  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_Init>:
}

char UART_Receive() {
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  86:	8f e9       	ldi	r24, 0x9F	; 159
  88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  98:	08 95       	ret

0000009a <UART_Transmit>:


void UART_Transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0)));
  9a:	e0 ec       	ldi	r30, 0xC0	; 192
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	90 81       	ld	r25, Z
  a0:	95 ff       	sbrs	r25, 5
  a2:	fd cf       	rjmp	.-6      	; 0x9e <UART_Transmit+0x4>
	UDR0 = data;
  a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  a8:	08 95       	ret

000000aa <main>:
}


int main(void) {
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	d4 50       	subi	r29, 0x04	; 4
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
	UART_Init();
  be:	0e 94 40 00 	call	0x80	; 0x80 <UART_Init>
  c2:	6e 01       	movw	r12, r28
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	c8 1a       	sub	r12, r24
  c8:	8b ef       	ldi	r24, 0xFB	; 251
  ca:	d8 0a       	sbc	r13, r24
  cc:	0f 2e       	mov	r0, r31
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ef 2e       	mov	r14, r31
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ff 2e       	mov	r15, r31
  d6:	f0 2d       	mov	r31, r0
  d8:	8e 01       	movw	r16, r28
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
		int index = 0;
		
		
		
		for (int i = 0; i < 1024; i++) {
			received_string[index++] = eeprom_read_byte(&Myvar[i]);
  de:	c7 01       	movw	r24, r14
  e0:	0e 94 8b 00 	call	0x116	; 0x116 <eeprom_read_byte>
  e4:	f8 01       	movw	r30, r16
  e6:	81 93       	st	Z+, r24
  e8:	8f 01       	movw	r16, r30
  ea:	ff ef       	ldi	r31, 0xFF	; 255
  ec:	ef 1a       	sub	r14, r31
  ee:	ff 0a       	sbc	r15, r31
		char received_string[1024];
		int index = 0;
		
		
		
		for (int i = 0; i < 1024; i++) {
  f0:	0c 15       	cp	r16, r12
  f2:	1d 05       	cpc	r17, r13
  f4:	a1 f7       	brne	.-24     	; 0xde <main+0x34>
			received_string[index++] = eeprom_read_byte(&Myvar[i]);
		}
		received_string[index] = '\0'; // Null-terminate the string
  f6:	f6 01       	movw	r30, r12
  f8:	10 82       	st	Z, r1

		
		for (int i = 0; received_string[i] != '\0'; i++) {
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	88 23       	and	r24, r24
  fe:	31 f3       	breq	.-52     	; 0xcc <main+0x22>
 100:	8e 01       	movw	r16, r28
 102:	0e 5f       	subi	r16, 0xFE	; 254
 104:	1f 4f       	sbci	r17, 0xFF	; 255
			UART_Transmit(received_string[i]);
 106:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_Transmit>
			received_string[index++] = eeprom_read_byte(&Myvar[i]);
		}
		received_string[index] = '\0'; // Null-terminate the string

		
		for (int i = 0; received_string[i] != '\0'; i++) {
 10a:	f8 01       	movw	r30, r16
 10c:	81 91       	ld	r24, Z+
 10e:	8f 01       	movw	r16, r30
 110:	81 11       	cpse	r24, r1
 112:	f9 cf       	rjmp	.-14     	; 0x106 <main+0x5c>
 114:	db cf       	rjmp	.-74     	; 0xcc <main+0x22>

00000116 <eeprom_read_byte>:
 116:	f9 99       	sbic	0x1f, 1	; 31
 118:	fe cf       	rjmp	.-4      	; 0x116 <eeprom_read_byte>
 11a:	92 bd       	out	0x22, r25	; 34
 11c:	81 bd       	out	0x21, r24	; 33
 11e:	f8 9a       	sbi	0x1f, 0	; 31
 120:	99 27       	eor	r25, r25
 122:	80 b5       	in	r24, 0x20	; 32
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
